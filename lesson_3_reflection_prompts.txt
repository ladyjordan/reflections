When would you want to use a remote repository rather than keeping all your work
local?

    Fill in your answer here

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Fill in your answer here

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

		Clone is a copy of all the files and folders in a repository plus its metadata, 
		which has the history of the modifications in these files.
		Fork is a clone of a repository except that it is on the Github servers instead on
		a local computer.
		Branches are a series of commits that branch off and stay isolated till merged with another 
		branch. They are usually used to develop new features, or do some experimentations which 
		could break the main functional code.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Keeping the local in sync with the remote helps avoid conflicts with 
    other collaborators, also it is helpful to have the state stored locally if one
    is to go offline. This way she has the most recent changes in her local, which 
    she could build on to without conflicts.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without these I would have to use a messenger to communicate and review any changes, 
    or resolve conflicts during merge manually and interact on various different platforms. 
    Also keep sending multiple versions of files back and forth with the latest changes. 
    Mechanisms like opening a pull request thelp code review before 
    merging the code, comment on it, branching to avoid breaking the main code yet never stop experimenting,
    forking a repo, cloning it, features to systematically resolve merge conflicts all make it easy to collborate.
    It gives a platform to do all of it in one place.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Experimental changes or a new feature are usually worked at in a new branch. This prevents the 
    main code on the master from breaking. These branches would eventually be merged with master 
    once they are done.

